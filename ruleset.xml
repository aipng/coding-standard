<?xml version="1.0"?>
<ruleset name="AipNg Coding Standard" namespace="AipNg\CS\Standard">
	<arg name="tab-width" value="4" />
	<description>The coding standard for PHP projects.</description>

	<!--
		The following tags are equivalent to the command line arguments:
		colors
		parallel=75
		np - no warnings, show progress
	-->

	<arg name="extensions" value="css,js,php,phpt" />

	<arg name="colors" />
	<arg name="parallel" value="75" />
	<arg value="np" />

	<config name="installed_paths" value="../../../vendor/slevomat/coding-standard" /><!-- relative path from PHPCS source location -->

	<rule ref="Generic.Arrays.ArrayIndent">
		<exclude
			name="Generic.Arrays.ArrayIndent.CloseBraceNotNewLine" /><!-- multiline items causes evaluation as multiline array https://github.com/squizlabs/PHP_CodeSniffer/issues/1791 -->
	</rule>
	<rule ref="Generic.Arrays.DisallowLongArraySyntax" />
	<rule ref="Generic.Classes.DuplicateClassName" />
	<rule ref="Generic.CodeAnalysis.EmptyStatement">
		<exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch" /><!-- empty catch statements are allowed -->
	</rule>
	<rule ref="Generic.CodeAnalysis.ForLoopShouldBeWhileLoop" />
	<rule ref="Generic.CodeAnalysis.UnconditionalIfStatement" />
	<rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier" />
	<rule ref="Generic.ControlStructures.InlineControlStructure" />
	<rule ref="Generic.Files.ByteOrderMark" />
	<rule ref="Generic.Files.InlineHTML" />
	<rule ref="Generic.Files.LineLength">
		<properties>
			<property name="lineLimit" value="120" />
			<property name="absoluteLineLimit" value="160" />
		</properties>
	</rule>
	<rule ref="Generic.Formatting.DisallowMultipleStatements" />
	<rule ref="Generic.Formatting.SpaceAfterCast" />
	<rule ref="Generic.Functions.FunctionCallArgumentSpacing" />
	<rule ref="Generic.Functions.OpeningFunctionBraceBsdAllman" />
	<rule ref="Generic.NamingConventions.ConstructorName" />
	<rule ref="Generic.NamingConventions.UpperCaseConstantName" />
	<rule ref="Generic.PHP.CharacterBeforePHPOpeningTag" />
	<rule ref="Generic.PHP.DeprecatedFunctions" />
	<rule ref="Generic.PHP.DisallowShortOpenTag" />
	<rule ref="Generic.PHP.ForbiddenFunctions" />
	<rule ref="Generic.PHP.LowerCaseConstant" />
	<rule ref="Generic.PHP.LowerCaseKeyword" />
	<rule ref="Generic.PHP.LowerCaseType" />
	<rule ref="Generic.Strings.UnnecessaryStringConcat">
		<properties>
			<property name="allowMultiline" value="true" />
		</properties>
	</rule>
	<rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
		<properties>
			<property name="ignoreNewlines" value="true" />
		</properties>
	</rule>
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent" />
	<rule ref="Generic.WhiteSpace.LanguageConstructSpacing" />
	<rule ref="Generic.WhiteSpace.ScopeIndent">
		<properties>
			<property name="tabIndent" value="true" />
		</properties>
	</rule>

	<rule ref="PEAR.Classes.ClassDeclaration" />
	<rule ref="PEAR.Commenting.InlineComment" />
	<rule ref="PEAR.Formatting.MultiLineAssignment" />
	<rule ref="PEAR.WhiteSpace.ObjectOperatorIndent" />

	<rule ref="PSR1.Classes.ClassDeclaration" />
	<rule ref="PSR1.Files.SideEffects" />
	<rule ref="PSR1.Methods.CamelCapsMethodName" />

	<rule ref="PSR2.Classes.PropertyDeclaration" />
	<rule ref="PSR2.ControlStructures.ControlStructureSpacing">
		<exclude
			name="PSR2.ControlStructures.ControlStructureSpacing.SpacingAfterOpenBrace" /><!-- we want to put first expression of multiline condition on next line -->
	</rule>
	<rule ref="PSR2.ControlStructures.ElseIfDeclaration" />
	<rule ref="PSR2.ControlStructures.SwitchDeclaration">
		<exclude name="PSR2.ControlStructures.SwitchDeclaration.caseIndent" /><!-- checked by more generic Generic.WhiteSpace.ScopeIndent.Incorrect -->
		<exclude name="PSR2.ControlStructures.SwitchDeclaration.defaultIndent" /><!-- checked by more generic Generic.WhiteSpace.ScopeIndent.Incorrect -->
	</rule>
	<rule ref="PSR2.Files.ClosingTag" />
	<rule ref="PSR2.Files.EndFileNewline" />
	<rule ref="PSR2.Methods.FunctionCallSignature">
		<exclude
			name="PSR2.Methods.FunctionCallSignature.SpaceAfterCloseBracket" /><!-- space after closing bracked should be checked depending on where function is called, not as part of the function call -->
	</rule>
	<rule ref="PSR2.Methods.FunctionClosingBrace" />
	<rule ref="PSR2.Methods.MethodDeclaration" />
	<rule ref="PSR2.Namespaces.UseDeclaration" />

	<rule ref="SlevomatCodingStandard.Arrays.ArrayAccess" />
	<rule ref="SlevomatCodingStandard.Arrays.MultiLineArrayEndBracketPlacement" />
	<rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma" />
	<rule ref="SlevomatCodingStandard.Attributes.AttributeAndTargetSpacing" />
	<rule ref="SlevomatCodingStandard.Attributes.DisallowAttributesJoining" />
	<rule ref="SlevomatCodingStandard.Attributes.DisallowMultipleAttributesPerLine" />
	<rule ref="SlevomatCodingStandard.Classes.BackedEnumTypeSpacing" />
	<rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility" />
	<rule ref="SlevomatCodingStandard.Classes.DisallowMultiConstantDefinition" />
	<rule ref="SlevomatCodingStandard.Classes.DisallowMultiPropertyDefinition" />
	<rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces" />
	<rule ref="SlevomatCodingStandard.Classes.MethodSpacing">
		<properties>
			<property name="minLinesCount" value="2" />
			<property name="maxLinesCount" value="2" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Classes.PropertyDeclaration" />
	<rule ref="SlevomatCodingStandard.Classes.PropertySpacing">
		<properties>
			<property name="minLinesCountBeforeWithComment" value="1" />
			<property name="maxLinesCountBeforeWithComment" value="1" />
			<property name="minLinesCountBeforeWithoutComment" value="1" />
			<property name="maxLinesCountBeforeWithoutComment" value="1" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration" />
	<rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">
		<properties>
			<property name="linesCountBeforeFirstUse" value="1" />
			<property name="linesCountAfterLastUse" value="1" />
			<property name="linesCountAfterLastUseWhenLastInClass" value="1" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.AnnotationName" />
	<rule ref="SlevomatCodingStandard.Commenting.EmptyComment" />
	<rule ref="SlevomatCodingStandard.Commenting.InlineDocCommentDeclaration">
		<properties>
			<property name="allowDocCommentAboveReturn" value="1" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.RequireOneLinePropertyDocComment" />
	<rule ref="SlevomatCodingStandard.Commenting.UselessFunctionDocComment">
		<properties>
			<property name="traversableTypeHints" type="array">
				<element value="Traversable" />
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment" />
	<rule ref="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing">
		<properties>
			<property name="linesCountAfterLast" value="0" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowEmpty" />
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowTrailingMultiLineTernaryOperator" />
	<rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison" />
	<rule ref="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing">
		<properties>
			<property name="linesCountAfterWhenLastInCaseOrDefault" value="1" />
			<property name="linesCountAfterWhenLastInLastCaseOrDefault" value="0" />
			<property name="jumpStatements" type="array">
				<element value="return" />
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses" />
	<rule ref="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses" />
	<rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceEqualOperator" />
	<rule ref="SlevomatCodingStandard.Exceptions.DeadCatch" />
	<rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly" />
	<rule ref="SlevomatCodingStandard.Exceptions.RequireNonCapturingCatch" />
	<rule ref="SlevomatCodingStandard.Functions.NamedArgumentSpacing" />
	<rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInCall" />
	<rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInClosureUse" />
	<rule ref="SlevomatCodingStandard.Functions.RequireTrailingCommaInDeclaration" />
	<rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure" />
	<rule ref="SlevomatCodingStandard.Functions.ArrowFunctionDeclaration">
		<properties>
			<property name="spacesCountAfterKeyword" value="0" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator" />
	<rule ref="SlevomatCodingStandard.PHP.ShortList" />
	<rule ref="SlevomatCodingStandard.PHP.TypeCast" />
	<rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses">
		<properties>
			<property name="caseSensitive" value="false" />
			<property name="psr12Compatible" value="false" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse" />
	<rule ref="SlevomatCodingStandard.Namespaces.FullyQualifiedClassNameInAnnotation" />
	<rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine" />
	<rule ref="SlevomatCodingStandard.Namespaces.NamespaceDeclaration" />
	<rule ref="SlevomatCodingStandard.Namespaces.NamespaceSpacing" />
	<rule ref="SlevomatCodingStandard.Namespaces.RequireOneNamespaceInFile" />
	<rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
		<properties>
			<property name="searchAnnotations" value="true" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />
	<rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
	<rule ref="SlevomatCodingStandard.Namespaces.UselessAlias" />
	<rule ref="SlevomatCodingStandard.PHP.TypeCast" />
	<rule ref="SlevomatCodingStandard.PHP.UselessParentheses" />
	<rule ref="SlevomatCodingStandard.PHP.UselessSemicolon" />
	<rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
		<properties>
			<property name="newlinesCountBetweenOpenTagAndDeclare" value="2" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.LongTypeHints" />
	<rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition" />
	<rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue" />
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing" />
	<rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHint">
		<exclude name="SlevomatCodingStandard.TypeHints.ParameterTypeHint.UselessAnnotation" />
		<properties>
			<property name="traversableTypeHints" type="array">
				<element value="Traversable" />
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.PropertyTypeHint">
		<properties>
			<property name="traversableTypeHints" type="array">
				<element value="Traversable" />
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHint">
		<exclude name="SlevomatCodingStandard.TypeHints.ReturnTypeHint.UselessAnnotation" />
		<properties>
			<property name="traversableTypeHints" type="array">
				<element value="Traversable" />
			</property>
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing" />
	<rule ref="SlevomatCodingStandard.TypeHints.UnionTypeHintFormat">
		<properties>
			<property name="shortNullable" value="true" />
			<property name="nullPosition" value="last" />
		</properties>
	</rule>
	<rule ref="SlevomatCodingStandard.TypeHints.UselessConstantTypeHint" />
	<rule ref="SlevomatCodingStandard.Variables.DuplicateAssignmentToVariable" />
	<rule ref="SlevomatCodingStandard.Variables.UnusedVariable" />

	<rule ref="Squiz.Arrays.ArrayBracketSpacing">
		<exclude name="Squiz.Arrays.ArrayBracketSpacing.SpaceBeforeBracket" /><!-- does not handle nested array access across multiple lines -->
	</rule>
	<rule ref="Squiz.Arrays.ArrayDeclaration">
		<exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNewLine" /><!-- does not handle wrapped content -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned" /><!-- expects closing brace at the same level as opening brace -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.DoubleArrowNotAligned" /><!-- we don't want spacing with alignment -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.FirstIndexNoNewline" /><!-- expects multi-value array always written on multiple lines -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.FirstValueNoNewline" /><!-- expects multi-value array always written on multiple lines -->
		<exclude
			name="Squiz.Arrays.ArrayDeclaration.IndexNoNewline" /><!-- false positives with nested arrays https://github.com/squizlabs/PHP_CodeSniffer/issues/2937#issuecomment-615262067 -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned" /><!-- uses indentation of only single space -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.MultiLineNotAllowed" /><!-- even a single-value array can be written on multiple lines -->
		<exclude
			name="Squiz.Arrays.ArrayDeclaration.NoComma" /><!-- does not handle nested array access with complex keys on multiple lines; also already checked better by SlevomatCodingStandard.Arrays.TrailingArrayComma -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast" /><!-- expects multi-value array always written on multiple lines -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed" /><!-- multiple values can be written on a single line -->
		<exclude
			name="Squiz.Arrays.ArrayDeclaration.ValueNoNewline" /><!-- false positives with nested arrays https://github.com/squizlabs/PHP_CodeSniffer/issues/2937#issuecomment-615262067 -->
		<exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned" /><!-- we don't want spacing with alignment -->
	</rule>
	<rule ref="Squiz.Classes.ClassFileName" />
	<rule ref="Squiz.Classes.SelfMemberReference" />
	<rule ref="Squiz.Classes.ValidClassName" />
	<rule ref="Squiz.Commenting.DocCommentAlignment">
		<exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar" /><!-- space needed for indented annotations -->
	</rule>
	<rule ref="Squiz.Commenting.EmptyCatchComment" />
	<rule ref="Squiz.Commenting.FunctionComment">
		<exclude name="Squiz.Commenting.FunctionComment.EmptyThrows" /><!-- @throws are forbidden -->
		<exclude name="Squiz.Commenting.FunctionComment.IncorrectParamVarName" /><!-- requires long boolean and integer parameters -->
		<exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint" /><!-- collection syntax such as string[] is not supported -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidReturn" /><!-- enforces incorrect types -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidReturnNotVoid" /><!-- is not able to detect return types such as string|null as correct -->
		<exclude name="Squiz.Commenting.FunctionComment.InvalidThrows" /><!-- @throws are forbidden -->
		<exclude name="Squiz.Commenting.FunctionComment.Missing" /><!-- PHPDoc is not required on all methods -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamComment" /><!-- comments are not required for @param -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingParamTag" /><!-- comments are not required for @param -->
		<exclude name="Squiz.Commenting.FunctionComment.MissingReturn" /><!-- void type is not used -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentFullStop" /><!-- comments don't have to be sentences -->
		<exclude name="Squiz.Commenting.FunctionComment.ParamCommentNotCapital" /><!-- comments don't have to be sentences -->
		<exclude name="Squiz.Commenting.FunctionComment.ScalarTypeHintMissing" /><!-- works only for code requiring PHP 7 code or better -->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamName" /><!-- we don't want spacing with alignment -->
		<exclude name="Squiz.Commenting.FunctionComment.SpacingAfterParamType" /><!-- we don't want spacing with alignment -->
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNoFullStop" /><!-- @throws are forbidden -->
		<exclude name="Squiz.Commenting.FunctionComment.ThrowsNotCapital" /><!-- @throws are forbidden -->
		<exclude name="Squiz.Commenting.FunctionComment.TypeHintMissing" /><!-- doesn't work with self as typehint -->
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.DuplicateReturn">
		<message>Only 1 @return annotation is allowed in a function comment</message>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.ExtraParamComment">
		<message>Extra @param annotation</message>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.InvalidNoReturn">
		<message>Function has no return statement, but annotation @return is present</message>
	</rule>
	<rule ref="Squiz.ControlStructures.ControlSignature" />
	<rule ref="Squiz.ControlStructures.ForEachLoopDeclaration" />
	<rule ref="Squiz.ControlStructures.ForLoopDeclaration" />
	<rule ref="Squiz.Functions.FunctionDeclaration" />
	<rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
		<properties>
			<property name="equalsSpacing" value="1" />
		</properties>
		<exclude
			name="Squiz.Functions.FunctionDeclarationArgumentSpacing.SpacingAfterHint" /><!-- already checked by SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing.MultipleSpacesBetweenTypeHintAndParameter -->
	</rule>
	<rule ref="Squiz.Functions.GlobalFunction" />
	<rule ref="Squiz.Functions.MultiLineFunctionDeclaration">
		<exclude name="Squiz.Functions.MultiLineFunctionDeclaration.NewlineBeforeOpenBrace" /><!-- clashes with OpeningFunctionBraceBsdAllman -->
	</rule>
	<rule ref="Squiz.Operators.IncrementDecrementUsage">
		<exclude name="Squiz.Operators.IncrementDecrementUsage.NoBrackets" /><!-- afaik there is no need for brackets -->
	</rule>
	<rule ref="Squiz.Operators.ValidLogicalOperators" />
	<rule ref="Squiz.PHP.GlobalKeyword" />
	<rule ref="Squiz.PHP.Heredoc" />
	<rule ref="Squiz.PHP.InnerFunctions" />
	<rule ref="Squiz.PHP.LowercasePHPFunctions" />
	<rule ref="Squiz.PHP.NonExecutableCode" />
	<rule ref="Squiz.Scope.MethodScope" />
	<rule ref="Squiz.Scope.StaticThisUsage" />
	<rule ref="Squiz.Strings.DoubleQuoteUsage" />
	<rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
		<message>Variable "%s" not allowed in double quoted string; use sprintf() instead</message>
	</rule>
	<rule ref="Squiz.Strings.ConcatenationSpacing">
		<properties>
			<property name="ignoreNewlines" value="true" />
			<property name="spacing" value="1" />
		</properties>
	</rule>
	<rule ref="Squiz.Strings.EchoedStrings" />
	<rule ref="Squiz.WhiteSpace.CastSpacing" />
	<rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace" />
	<rule ref="Squiz.WhiteSpace.LogicalOperatorSpacing" />
	<!--	<rule ref="Squiz.WhiteSpace.MemberVarSpacing" />-->
	<rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="true" />
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.OperatorSpacing">
		<properties>
			<property name="ignoreNewlines" value="true" />
			<property name="ignoreSpacingBeforeAssignments" value="false" />
		</properties>
	</rule>
	<rule ref="Squiz.WhiteSpace.ScopeClosingBrace" />
	<rule ref="Squiz.WhiteSpace.ScopeKeywordSpacing" />
	<rule ref="Squiz.WhiteSpace.SemicolonSpacing" />
	<rule ref="Squiz.WhiteSpace.SuperfluousWhitespace" />
</ruleset>
